name: CI

run-name: "CI #${{ github.run_number }} - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.pull_request.number) || github.ref_name }} - ${{ github.event.head_commit.message || github.event.pull_request.title || 'Manual trigger' }}"

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  MINIMUM_COVERAGE: 80
  MAX_CRITICAL_VULNERABILITIES: 0
  MAX_HIGH_VULNERABILITIES: 0
  ALLOWED_LICENSES: 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,0BSD,CC0-1.0,Unlicense'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      cli: ${{ steps.changes.outputs.cli }}
      frontend: ${{ steps.changes.outputs.frontend }}
      should_run_backend: ${{ steps.changes.outputs.should_run_backend }}
      should_run_cli: ${{ steps.changes.outputs.should_run_cli }}
      should_run_frontend: ${{ steps.changes.outputs.should_run_frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: changes
        run: |
          # Determine base ref for comparison
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
          else
            BASE_REF="${{ github.event.before }}"
            if [ "$BASE_REF" == "0000000000000000000000000000000000000000" ]; then
              BASE_REF=$(git hash-object -t tree /dev/null)
            fi
          fi

          echo "Comparing against: $BASE_REF"

          CHANGED_FILES=$(git diff --name-only $BASE_REF ${{ github.sha }} || echo "")

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if CI workflow itself was changed - if so, run everything
          CI_WORKFLOW_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^\.github/workflows/.*\.ya?ml$'; then
            CI_WORKFLOW_CHANGED=true
            echo "⚠️ CI workflow file changed - running all jobs"
          fi

          # Check for backend changes (API, Domain, Application, Infrastructure, or their tests)
          BACKEND_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^(src/BDP\.(Registry\.API|Domain|Application|Infrastructure)/|test/BDP\.(Registry\.API|Domain|Application|Infrastructure)\.Tests/)'; then
            BACKEND_CHANGED=true
          fi

          # Check for CLI changes (CLI or its tests)
          CLI_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^(src/BDP\.(CLI|Domain|Application|Infrastructure)/|test/BDP\.(CLI|Domain|Application|Infrastructure)\.Tests/)'; then
            CLI_CHANGED=true
          fi

          # Check for frontend changes
          FRONTEND_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^src/BDP\.Registry\.Web/'; then
            FRONTEND_CHANGED=true
          fi

          # If CI workflow changed, force all checks to run
          if [ "$CI_WORKFLOW_CHANGED" = true ]; then
            BACKEND_CHANGED=true
            CLI_CHANGED=true
            FRONTEND_CHANGED=true
          fi

          # Set outputs
          echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "cli=$CLI_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_cli=$CLI_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT

          echo "Backend changed: $BACKEND_CHANGED"
          echo "CLI changed: $CLI_CHANGED"
          echo "Frontend changed: $FRONTEND_CHANGED"

  lint-backend:
    name: Lint Backend
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Run dotnet format (style)
        run: |
          echo "## Backend Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if dotnet format --verify-no-changes --verbosity diagnostic; then
            echo "✅ Code formatting is correct." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code formatting issues detected." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`dotnet format\` locally to fix formatting issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Build with warnings as errors
        run: |
          echo "## Build with Enhanced Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=true; then
            echo "✅ Build completed with no warnings or errors." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Build failed with warnings or errors." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run code analysis
        run: |
          echo "## Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if dotnet build --configuration Release --no-restore \
            /p:EnforceCodeStyleInBuild=true \
            /p:AnalysisLevel=latest-all \
            /p:TreatWarningsAsErrors=true; then
            echo "✅ Code analysis passed with no issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Code analysis failed with issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  lint-frontend:
    name: Lint Frontend
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Run ESLint
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn lint; then
            echo "✅ ESLint passed with no issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ ESLint found issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run Prettier check
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn prettier --check .; then
            echo "✅ All files are properly formatted." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Some files need formatting." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`yarn prettier --write .\` locally to fix formatting issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run TypeScript check
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## TypeScript Type Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn tsc --noEmit; then
            echo "✅ TypeScript type checking passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ TypeScript type errors found." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  build-and-test-backend:
    name: Build & Test Backend
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true'
    runs-on: ubuntu-latest
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.coverage-percentage }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: |
          echo "## Backend Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if dotnet test test/BDP.Registry.API.Tests/BDP.Registry.API.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            -- DataCollectionRunSettings.DataCollectors.DataCollector.Configuration.Format=opencover; then
            echo "✅ All backend tests passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Backend tests failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Calculate coverage
        id: coverage
        run: |
          COVERAGE_FILE=$(find ./TestResults -name "coverage.opencover.xml" | head -n 1)

          if [ -z "$COVERAGE_FILE" ]; then
            echo "::error::Coverage file not found"
            exit 1
          fi

          LINES_VALID=$(xmllint --xpath "string(//CoverageSession/Summary/@numSequencePoints)" "$COVERAGE_FILE")
          LINES_COVERED=$(xmllint --xpath "string(//CoverageSession/Summary/@visitedSequencePoints)" "$COVERAGE_FILE")

          if [ -z "$LINES_VALID" ] || [ -z "$LINES_COVERED" ] || [ "$LINES_VALID" -eq 0 ]; then
            echo "::error::Could not extract coverage data"
            exit 1
          fi

          COVERAGE=$(awk "BEGIN {printf \"%.2f\", ($LINES_COVERED / $LINES_VALID) * 100}")
          echo "coverage-percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "Coverage: $COVERAGE%"

      - name: Upload test results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: test-results-backend
          path: ./TestResults/*.trx
          retention-days: 30

      - name: Upload coverage report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report-backend
          path: ./TestResults/**/coverage.opencover.xml
          retention-days: 30

  build-and-test-cli:
    name: Build & Test CLI
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run tests
        run: |
          echo "## CLI Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if dotnet test test/BDP.CLI.Tests/BDP.CLI.Tests.csproj \
            --configuration Release \
            --no-build \
            --logger "trx;LogFileName=test-results.trx" \
            --results-directory ./TestResults; then
            echo "✅ All CLI tests passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ CLI tests failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload test results
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: test-results-cli
          path: ./TestResults/*.trx
          retention-days: 30

  build-and-test-frontend:
    name: Build & Test Frontend
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Build
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Build" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn build; then
            echo "✅ Frontend build successful." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend build failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run tests
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn test:run; then
            echo "✅ All frontend tests passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Frontend tests failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload test coverage
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: coverage-report-frontend
          path: src/BDP.Registry.Web/coverage/
          retention-days: 30

  coverage-gate:
    name: Coverage Gate
    needs: build-and-test-backend
    if: needs.detect-changes.outputs.should_run_backend == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Check coverage threshold
        run: |
          COVERAGE=${{ needs.build-and-test-backend.outputs.coverage-percentage }}
          THRESHOLD=${{ env.MINIMUM_COVERAGE }}

          echo "## Coverage Gate" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage: **${COVERAGE}%**" >> $GITHUB_STEP_SUMMARY
          echo "Threshold: **${THRESHOLD}%**" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if awk "BEGIN {exit !($COVERAGE >= $THRESHOLD)}"; then
            echo "✅ Coverage meets threshold" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Coverage below threshold (${COVERAGE}% < ${THRESHOLD}%)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  codeql-analysis:
    name: CodeQL Analysis
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true' || needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        include:
          - language: csharp
            build-mode: manual
          - language: javascript-typescript
            build-mode: none

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - name: Setup .NET
        if: matrix.language == 'csharp'
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Build C# projects
        if: matrix.language == 'csharp'
        run: |
          dotnet restore
          dotnet build --configuration Release --no-restore

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-audit-backend:
    name: Dependency Audit (Backend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Restore dependencies
        run: dotnet restore

      - name: List vulnerable packages
        id: audit
        run: |
          echo "## Backend Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          AUDIT_OUTPUT=$(dotnet list package --vulnerable --include-transitive 2>&1 || true)

          CRITICAL_COUNT=$(echo "$AUDIT_OUTPUT" | grep -c "Critical" || true)
          HIGH_COUNT=$(echo "$AUDIT_OUTPUT" | grep -c "High" || true)

          echo "Critical vulnerabilities: $CRITICAL_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "High vulnerabilities: $HIGH_COUNT" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$CRITICAL_COUNT" -gt ${{ env.MAX_CRITICAL_VULNERABILITIES }} ] || [ "$HIGH_COUNT" -gt ${{ env.MAX_HIGH_VULNERABILITIES }} ]; then
            echo "❌ Security vulnerabilities detected:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "$AUDIT_OUTPUT" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            echo "::error::Found $CRITICAL_COUNT critical and $HIGH_COUNT high vulnerabilities"
            exit 1
          else
            echo "✅ No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

  dependency-audit-frontend:
    name: Dependency Audit (Frontend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Run yarn audit
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Security Audit" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if AUDIT_JSON=$(yarn npm audit --all --recursive --json 2>/dev/null); then
            CRITICAL_COUNT=$(echo "$AUDIT_JSON" | jq '[.advisories // {} | to_entries[] | select(.value.severity == "critical")] | length')
            HIGH_COUNT=$(echo "$AUDIT_JSON" | jq '[.advisories // {} | to_entries[] | select(.value.severity == "high")] | length')
            MODERATE_COUNT=$(echo "$AUDIT_JSON" | jq '[.advisories // {} | to_entries[] | select(.value.severity == "moderate")] | length')
            LOW_COUNT=$(echo "$AUDIT_JSON" | jq '[.advisories // {} | to_entries[] | select(.value.severity == "low")] | length')

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW_COUNT |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            if [ "$CRITICAL_COUNT" -gt ${{ env.MAX_CRITICAL_VULNERABILITIES }} ] || [ "$HIGH_COUNT" -gt ${{ env.MAX_HIGH_VULNERABILITIES }} ]; then
              echo "❌ Security vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY

              if [ "$CRITICAL_COUNT" -gt 0 ]; then
                echo "### Critical Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$AUDIT_JSON" | jq -r '.advisories | to_entries[] | select(.value.severity == "critical") | "[\(.value.module_name)] \(.value.title) - \(.value.url)"'>> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi

              if [ "$HIGH_COUNT" -gt 0 ]; then
                echo "### High Vulnerabilities:" >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
                echo "$AUDIT_JSON" | jq -r '.advisories | to_entries[] | select(.value.severity == "high") | "[\(.value.module_name)] \(.value.title) - \(.value.url)"' >> $GITHUB_STEP_SUMMARY
                echo '```' >> $GITHUB_STEP_SUMMARY
              fi

              echo "::error::Found $CRITICAL_COUNT critical and $HIGH_COUNT high vulnerabilities"
              exit 1
            else
              echo "✅ No critical or high severity vulnerabilities found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✅ No vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

  license-compliance-backend:
    name: License Compliance (Backend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Install dotnet-project-licenses
        run: dotnet tool install --global dotnet-project-licenses

      - name: Restore dependencies
        run: dotnet restore

      - name: Generate license report
        run: |
          echo "## Backend License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          dotnet-project-licenses --input . --output-directory ./licenses --export-license-texts --format json
          dotnet-project-licenses --input . --format table > licenses/licenses-summary.txt

          echo "License report generated successfully" >> $GITHUB_STEP_SUMMARY

      - name: Check for non-compliant licenses
        id: license-check
        run: |
          ALLOWED_LICENSES="${{ env.ALLOWED_LICENSES }}"

          ACKNOWLEDGED_PACKAGES=""
          if [ -f ".github/acknowledged-licenses-backend.json" ]; then
            ACKNOWLEDGED_PACKAGES=$(jq -r '.[] | .package' .github/acknowledged-licenses-backend.json 2>/dev/null | tr '\n' '|' || echo "")
            if [ ! -z "$ACKNOWLEDGED_PACKAGES" ]; then
              echo "📋 Loaded acknowledged packages from .github/acknowledged-licenses-backend.json"
            fi
          fi

          LICENSE_FILE=$(find ./licenses -name "*.json" -type f | head -n 1)

          if [ -z "$LICENSE_FILE" ] || [ ! -f "$LICENSE_FILE" ]; then
            echo "::error::License report file not found"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          echo "Using license file: $LICENSE_FILE"

          NON_COMPLIANT_COUNT=0
          rm -f non-compliant.txt

          jq -r '.[] | "\(.PackageName)|\(.PackageVersion)|\(.LicenseType // "UNKNOWN")"' "$LICENSE_FILE" | while IFS='|' read -r pkg_name pkg_version license; do
            pkg_full="${pkg_name}@${pkg_version}"

            if [ ! -z "$ACKNOWLEDGED_PACKAGES" ]; then
              if echo "$ACKNOWLEDGED_PACKAGES" | grep -qF "$pkg_full"; then
                continue
              fi
            fi

            if [ -z "$license" ] || [ "$license" = "UNKNOWN" ] || [ "$license" = "null" ] || [ "$license" = "" ]; then
              echo "⚠️ Package $pkg_full has UNKNOWN license, attempting to fetch from NuGet..."

              LICENSE_URL=$(curl -s "https://api.nuget.org/v3/registration5-semver1/${pkg_name,,}/index.json" | \
                jq -r --arg version "$pkg_version" \
                '.items[].items[] | select(.catalogEntry.version == $version) | .catalogEntry.licenseUrl // .catalogEntry.licenseExpression // "UNKNOWN"' 2>/dev/null || echo "UNKNOWN")

              if [ "$LICENSE_URL" = "UNKNOWN" ] || [ -z "$LICENSE_URL" ]; then
                echo "$pkg_full|UNKNOWN - Could not determine license" >> non-compliant.txt
                continue
              else
                if [[ ! "$LICENSE_URL" =~ ^https?:// ]]; then
                  license="$LICENSE_URL"
                  echo "✓ Found license for $pkg_full: $license"
                else
                  echo "$pkg_full|UNKNOWN - License URL only: $LICENSE_URL" >> non-compliant.txt
                  continue
                fi
              fi
            fi

            CLEAN_LICENSE=$(echo "$license" | sed 's/[()]//g' | sed 's/ OR /,/g' | sed 's/ AND /,/g')

            IS_COMPLIANT=false
            for lic in $(echo "$CLEAN_LICENSE" | tr ',' ' '); do
              lic=$(echo "$lic" | xargs)

              if echo "$ALLOWED_LICENSES" | grep -qiE "(^|,)${lic}(,|$)"; then
                IS_COMPLIANT=true
                break
              fi
            done

            if [ "$IS_COMPLIANT" = false ]; then
              echo "$pkg_full|$license" >> non-compliant.txt
            fi
          done

          if [ -f non-compliant.txt ]; then
            NON_COMPLIANT_COUNT=$(wc -l < non-compliant.txt)
          fi

          if [ "$NON_COMPLIANT_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Non-compliant licenses found ($NON_COMPLIANT_COUNT packages):**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | License |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|" >> $GITHUB_STEP_SUMMARY
            while IFS='|' read -r pkg_full license; do
              echo "| \`$pkg_full\` | $license |" >> $GITHUB_STEP_SUMMARY
            done < non-compliant.txt
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Allowed licenses:** $ALLOWED_LICENSES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To acknowledge: Create \`.github/acknowledged-licenses-backend.json\`" >> $GITHUB_STEP_SUMMARY
            echo "::error::Non-compliant or unknown licenses detected in $NON_COMPLIANT_COUNT package(s)"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: license-report-backend
          path: |
            licenses/*.json
            licenses/licenses-summary.txt
          retention-days: 90

  license-compliance-frontend:
    name: License Compliance (Frontend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Install license-checker-rseidelsohn
        working-directory: src/BDP.Registry.Web
        run: yarn add --dev license-checker-rseidelsohn

      - name: Generate license report
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend License Compliance" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          npx license-checker-rseidelsohn \
            --json \
            --out licenses.json \
            --customPath <(echo '{
              "name": "",
              "version": "",
              "licenses": "",
              "repository": "",
              "publisher": "",
              "path": "",
              "licenseFile": ""
            }')

          npx license-checker-rseidelsohn --csv --out licenses.csv
          npx license-checker-rseidelsohn --summary > licenses-summary.txt

          echo "License report generated successfully" >> $GITHUB_STEP_SUMMARY

      - name: Check for non-compliant licenses
        id: license-check
        working-directory: src/BDP.Registry.Web
        run: |
          ALLOWED_LICENSES="${{ env.ALLOWED_LICENSES }}"

          ACKNOWLEDGED_PACKAGES=""
          if [ -f "../../.github/acknowledged-licenses-frontend.json" ]; then
            ACKNOWLEDGED_PACKAGES=$(jq -r '.[] | .package' ../../.github/acknowledged-licenses-frontend.json 2>/dev/null | tr '\n' '|' || echo "")
            if [ ! -z "$ACKNOWLEDGED_PACKAGES" ]; then
              echo "📋 Loaded acknowledged packages from .github/acknowledged-licenses-frontend.json"
            fi
          fi

          if [ ! -f "licenses.json" ]; then
            echo "::error::License report file not found"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          NON_COMPLIANT_COUNT=0
          rm -f non-compliant.txt

          jq -r 'to_entries | .[] | "\(.key)|\(.value.licenses // "UNKNOWN")"' licenses.json | while IFS='|' read -r pkg_full license; do
            if [ ! -z "$ACKNOWLEDGED_PACKAGES" ]; then
              if echo "$ACKNOWLEDGED_PACKAGES" | grep -qF "$pkg_full"; then
                continue
              fi
            fi

            if [ -z "$license" ] || [ "$license" = "UNLICENSED" ] || [ "$license" = "UNKNOWN" ] || [ "$license" = "null" ]; then
              echo "$pkg_full|UNKNOWN - No license information available" >> non-compliant.txt
              continue
            fi

            CLEAN_LICENSE=$(echo "$license" | sed 's/[()]//g' | sed 's/ OR /,/g' | sed 's/ AND /,/g')

            IS_COMPLIANT=false
            for lic in $(echo "$CLEAN_LICENSE" | tr ',' ' '); do
              lic=$(echo "$lic" | xargs)

              if echo "$ALLOWED_LICENSES" | grep -qiE "(^|,)${lic}(,|$)"; then
                IS_COMPLIANT=true
                break
              fi
            done

            if [ "$IS_COMPLIANT" = false ]; then
              echo "$pkg_full|$license" >> non-compliant.txt
            fi
          done

          if [ -f non-compliant.txt ]; then
            NON_COMPLIANT_COUNT=$(wc -l < non-compliant.txt)
          fi

          if [ "$NON_COMPLIANT_COUNT" -gt 0 ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "❌ **Non-compliant licenses found ($NON_COMPLIANT_COUNT packages):**" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Package | License |" >> $GITHUB_STEP_SUMMARY
            echo "|---------|---------|" >> $GITHUB_STEP_SUMMARY
            while IFS='|' read -r pkg_full license; do
              echo "| \`$pkg_full\` | $license |" >> $GITHUB_STEP_SUMMARY
            done < non-compliant.txt
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "**Allowed licenses:** $ALLOWED_LICENSES" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "To acknowledge: Create \`.github/acknowledged-licenses-frontend.json\`" >> $GITHUB_STEP_SUMMARY

            ERROR_MSG="Non-compliant or unknown licenses detected in $NON_COMPLIANT_COUNT package(s). See job summary for details."
            echo "::error title=License Compliance Failed::$ERROR_MSG"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✅ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v5
        if: always()
        with:
          name: license-report-frontend
          path: |
            src/BDP.Registry.Web/licenses.json
            src/BDP.Registry.Web/licenses.csv
            src/BDP.Registry.Web/licenses-summary.txt
          retention-days: 90

  docker-build:
    name: Docker Build Test
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Registry API Docker image
        if: needs.detect-changes.outputs.should_run_backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/BDP.Registry.API/Dockerfile
          push: false
          tags: bdp-registry-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Registry Web Docker image
        if: needs.detect-changes.outputs.should_run_frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/BDP.Registry.Web
          file: src/BDP.Registry.Web/Dockerfile
          push: false
          tags: bdp-registry-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker build summary
        run: |
          echo "## Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ All Docker images built successfully" >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate
    needs:
      - detect-changes
      - lint-backend
      - lint-frontend
      - build-and-test-backend
      - build-and-test-cli
      - build-and-test-frontend
      - coverage-gate
      - codeql-analysis
      - dependency-audit-backend
      - dependency-audit-frontend
      - license-compliance-backend
      - license-compliance-frontend
      - docker-build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs passed or skipped
        run: |
          echo "# Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          check_job() {
            local result=$1
            local name=$2
            local extra=$3

            if [[ "$result" == "success" ]]; then
              echo "✅ $name: Passed$extra" >> $GITHUB_STEP_SUMMARY
              return 0
            elif [[ "$result" == "skipped" ]]; then
              echo "⏭️ $name: Skipped (no relevant changes)" >> $GITHUB_STEP_SUMMARY
              return 0
            else
              echo "❌ $name: Failed" >> $GITHUB_STEP_SUMMARY
              return 1
            fi
          }

          FAILED=false

          check_job "${{ needs.lint-backend.result }}" "Linting (Backend)" "" || FAILED=true
          check_job "${{ needs.lint-frontend.result }}" "Linting (Frontend)" "" || FAILED=true
          check_job "${{ needs.build-and-test-backend.result }}" "Build & Test Backend" "" || FAILED=true
          check_job "${{ needs.build-and-test-cli.result }}" "Build & Test CLI" "" || FAILED=true
          check_job "${{ needs.build-and-test-frontend.result }}" "Build & Test Frontend" "" || FAILED=true
          check_job "${{ needs.coverage-gate.result }}" "Coverage Gate" " (${{ needs.build-and-test-backend.outputs.coverage-percentage }}%)" || FAILED=true
          check_job "${{ needs.codeql-analysis.result }}" "CodeQL Analysis" "" || FAILED=true
          check_job "${{ needs.dependency-audit-backend.result }}" "Dependency Audit (Backend)" "" || FAILED=true
          check_job "${{ needs.dependency-audit-frontend.result }}" "Dependency Audit (Frontend)" "" || FAILED=true
          check_job "${{ needs.license-compliance-backend.result }}" "License Compliance (Backend)" "" || FAILED=true
          check_job "${{ needs.license-compliance-frontend.result }}" "License Compliance (Frontend)" "" || FAILED=true
          check_job "${{ needs.docker-build.result }}" "Docker Build" "" || FAILED=true

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED" = true ]; then
            echo "❌ Quality gate failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✅ Quality gate passed" >> $GITHUB_STEP_SUMMARY
          fi
