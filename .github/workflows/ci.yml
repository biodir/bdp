name: CI

run-name: "CI #${{ github.run_number }} - ${{ github.event_name == 'pull_request' && format('PR #{0}', github.event.pull_request.number) || github.ref_name }} - ${{ github.event.head_commit.message || github.event.pull_request.title || 'Manual trigger' }}"

on:
  push:
    branches:
      - main
      - development
  pull_request:
    branches:
      - main
      - development
  workflow_dispatch:

env:
  DOTNET_VERSION: '9.0.x'
  NODE_VERSION: '20.x'
  MINIMUM_COVERAGE: 80
  MAX_CRITICAL_VULNERABILITIES: 0
  MAX_HIGH_VULNERABILITIES: 0
  ALLOWED_LICENSES: 'MIT,Apache-2.0,BSD-2-Clause,BSD-3-Clause,ISC,0BSD,CC0-1.0,Unlicense'

jobs:
  detect-changes:
    name: Detect Changes
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      cli: ${{ steps.changes.outputs.cli }}
      frontend: ${{ steps.changes.outputs.frontend }}
      should_run_backend: ${{ steps.changes.outputs.should_run_backend }}
      should_run_cli: ${{ steps.changes.outputs.should_run_cli }}
      should_run_frontend: ${{ steps.changes.outputs.should_run_frontend }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect changed files
        id: changes
        run: |
          # Determine base ref for comparison
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            BASE_REF="${{ github.event.pull_request.base.sha }}"
          else
            BASE_REF="${{ github.event.before }}"
            if [ "$BASE_REF" == "0000000000000000000000000000000000000000" ]; then
              BASE_REF=$(git hash-object -t tree /dev/null)
            fi
          fi

          echo "Comparing against: $BASE_REF"

          CHANGED_FILES=$(git diff --name-only $BASE_REF ${{ github.sha }} || echo "")

          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if CI workflow itself was changed - if so, run everything
          CI_WORKFLOW_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^\.github/workflows/.*\.ya?ml$'; then
            CI_WORKFLOW_CHANGED=true
            echo "⚠️ CI workflow file changed - running all jobs"
          fi

          # Check for backend changes (API, Domain, Application, Infrastructure, or their tests)
          BACKEND_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^(src/BDP\.(Registry\.API|Domain|Application|Infrastructure)/|test/BDP\.(Registry\.API|Domain|Application|Infrastructure)\.Tests/)'; then
            BACKEND_CHANGED=true
          fi

          # Check for CLI changes (CLI or its tests)
          CLI_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^(src/BDP\.(CLI|Domain|Application|Infrastructure)/|test/BDP\.(CLI|Domain|Application|Infrastructure)\.Tests/)'; then
            CLI_CHANGED=true
          fi

          # Check for frontend changes
          FRONTEND_CHANGED=false
          if echo "$CHANGED_FILES" | grep -qE '^src/BDP\.Registry\.Web/'; then
            FRONTEND_CHANGED=true
          fi

          # If CI workflow changed, force all checks to run
          if [ "$CI_WORKFLOW_CHANGED" = true ]; then
            BACKEND_CHANGED=true
            CLI_CHANGED=true
            FRONTEND_CHANGED=true
          fi

          # Set outputs
          echo "backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "cli=$CLI_CHANGED" >> $GITHUB_OUTPUT
          echo "frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_backend=$BACKEND_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_cli=$CLI_CHANGED" >> $GITHUB_OUTPUT
          echo "should_run_frontend=$FRONTEND_CHANGED" >> $GITHUB_OUTPUT

          echo "Backend changed: $BACKEND_CHANGED"
          echo "CLI changed: $CLI_CHANGED"
          echo "Frontend changed: $FRONTEND_CHANGED"

  lint-backend:
    name: Lint Backend (.NET)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      # dotnet format for code style
      - name: Run dotnet format (style)
        run: |
          echo "## Backend Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # This will fail the job if formatting issues are found
          if dotnet format --verify-no-changes --verbosity diagnostic; then
            echo "✓ Code formatting is correct." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Code formatting issues detected." >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Run \`dotnet format\` locally to fix formatting issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      # Run dotnet build with /WarnAsError to treat warnings as errors
      - name: Build with warnings as errors
        run: |
          echo "## Build with Enhanced Warnings" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Build treating warnings as errors
          if dotnet build --configuration Release --no-restore /p:TreatWarningsAsErrors=true; then
            echo "✓ Build completed with no warnings or errors." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Build failed with warnings or errors." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      # Run Roslyn analyzers (if configured in .csproj files)
      - name: Run code analysis
        run: |
          echo "## Code Analysis Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run with code analysis enabled, treating analyzer warnings as errors
          if dotnet build --configuration Release --no-restore \
            /p:EnforceCodeStyleInBuild=true \
            /p:AnalysisLevel=latest-all \
            /p:TreatWarningsAsErrors=true; then
            echo "✓ Code analysis passed with no issues." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Code analysis failed with issues." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  lint-frontend:
    name: Lint Frontend
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Run ESLint
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Linting Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run ESLint and fail on any errors
          if yarn lint; then
            echo "✓ ESLint passed with no errors." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ ESLint failed with errors." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run TypeScript type checking
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## TypeScript Type Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run TypeScript compiler in no-emit mode to check for type errors
          if yarn tsc --noEmit; then
            echo "✓ TypeScript type checking passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ TypeScript type checking failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Run Prettier format check
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Code Formatting Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if code is formatted correctly
          if yarn prettier --check "src/**/*.{ts,tsx,js,jsx,json,css,scss,md}"; then
            echo "✓ Code formatting is correct." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Code formatting issues detected." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  build-and-test-backend:
    name: Build & Test Backend
    needs: [detect-changes, lint-backend]
    if: needs.detect-changes.outputs.should_run_backend == 'true'
    runs-on: ubuntu-latest
    outputs:
      coverage-percentage: ${{ steps.coverage-check.outputs.percentage }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build
        run: dotnet build --configuration Release --no-restore

      - name: Run Tests with Coverage
        run: |
          dotnet test \
            --configuration Release \
            --no-build \
            --verbosity normal \
            --collect:"XPlat Code Coverage" \
            --results-directory ./TestResults \
            --logger "trx;LogFileName=test-results.trx"

      - name: Parse Coverage and Generate Report
        id: coverage-check
        run: |
          COVERAGE_FILE=$(find ./TestResults -name 'coverage.cobertura.xml' -print -quit)

          if [ -z "$COVERAGE_FILE" ]; then
            echo "::warning::No coverage file found - tests may not have coverage enabled"
            echo "percentage=0" >> $GITHUB_OUTPUT
            exit 0
          fi

          echo "Found coverage file: $COVERAGE_FILE"

          LINE_RATE=$(grep -o 'line-rate="[^"]*"' "$COVERAGE_FILE" | head -1 | cut -d'"' -f2)
          COVERAGE=$(awk "BEGIN {printf \"%.2f\", $LINE_RATE * 100}")

          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT

          LINES_COVERED=$(grep -o 'lines-covered="[^"]*"' "$COVERAGE_FILE" | head -1 | cut -d'"' -f2)
          LINES_VALID=$(grep -o 'lines-valid="[^"]*"' "$COVERAGE_FILE" | head -1 | cut -d'"' -f2)
          BRANCH_RATE=$(grep -o 'branch-rate="[^"]*"' "$COVERAGE_FILE" | head -1 | cut -d'"' -f2)
          BRANCH_COVERAGE=$(awk "BEGIN {printf \"%.2f\", $BRANCH_RATE * 100}")

          cat >> $GITHUB_STEP_SUMMARY << EOF
          ## Backend Code Coverage Report

          | Metric | Value |
          |--------|-------|
          | **Line Coverage** | **${COVERAGE}%** |
          | **Branch Coverage** | ${BRANCH_COVERAGE}% |
          | **Lines Covered** | ${LINES_COVERED} / ${LINES_VALID} |

          EOF

          if (( $(echo "$COVERAGE >= ${{ env.MINIMUM_COVERAGE }}" | bc -l) )); then
            echo "✓ Coverage meets minimum threshold of ${{ env.MINIMUM_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Coverage is below minimum threshold of ${{ env.MINIMUM_COVERAGE }}%" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: TestResults/**/*.trx
          retention-days: 30

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-coverage-report
          path: TestResults/**/coverage.cobertura.xml
          retention-days: 30

  build-and-test-cli:
    name: Build & Test CLI
    needs: [detect-changes, lint-backend]
    if: needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Build CLI
        run: dotnet build src/BDP.CLI/BDP.CLI.csproj --configuration Release --no-restore

      - name: Run CLI Tests
        run: |
          if [ -d "test/BDP.CLI.Tests" ]; then
            dotnet test test/BDP.CLI.Tests/BDP.CLI.Tests.csproj \
              --configuration Release \
              --verbosity normal \
              --logger "trx;LogFileName=cli-test-results.trx"
          else
            echo "Note: No CLI tests found, skipping test execution" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload CLI Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: cli-test-results
          path: test/BDP.CLI.Tests/TestResults/**/*.trx
          retention-days: 30

  build-and-test-frontend:
    name: Build & Test Frontend
    needs: [detect-changes, lint-frontend]
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Build
        working-directory: src/BDP.Registry.Web
        run: yarn build

      - name: Run tests
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if yarn test --run --coverage; then
            echo "✓ All frontend tests passed." >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Frontend tests failed." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload test coverage
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: src/BDP.Registry.Web/coverage
          retention-days: 30

  coverage-gate:
    name: Coverage Gate
    needs: build-and-test-backend
    if: needs.build-and-test-backend.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Check coverage threshold
        run: |
          COVERAGE=${{ needs.build-and-test-backend.outputs.coverage-percentage }}
          MINIMUM=${{ env.MINIMUM_COVERAGE }}

          echo "## Coverage Gate Check" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "Coverage: ${COVERAGE}%" >> $GITHUB_STEP_SUMMARY
          echo "Minimum Required: ${MINIMUM}%" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if (( $(echo "$COVERAGE >= $MINIMUM" | bc -l) )); then
            echo "✓ Coverage gate passed" >> $GITHUB_STEP_SUMMARY
            exit 0
          else
            echo "✗ Coverage gate failed" >> $GITHUB_STEP_SUMMARY
            echo "::error::Coverage ${COVERAGE}% is below minimum threshold of ${MINIMUM}%"
            exit 1
          fi

  codeql-analysis:
    name: CodeQL Analysis
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    permissions:
      security-events: write
      actions: read
      contents: read
    strategy:
      fail-fast: false
      matrix:
        include:
          - language: csharp
            build-mode: manual
          - language: javascript-typescript
            build-mode: none
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}
          build-mode: ${{ matrix.build-mode }}

      - if: matrix.build-mode == 'manual' && needs.detect-changes.outputs.should_run_backend == 'true'
        name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - if: matrix.build-mode == 'manual' && needs.detect-changes.outputs.should_run_backend == 'true'
        name: Build .NET solution
        run: dotnet build --configuration Release

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:${{ matrix.language }}"

  dependency-audit-backend:
    name: Dependency Audit (Backend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Check for vulnerable packages
        id: vuln-check
        run: |
          echo "## .NET Dependency Vulnerability Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # List vulnerable packages
          dotnet list package --vulnerable --include-transitive 2>&1 | tee vulnerability-report-dotnet.txt

          # Check if vulnerabilities were found
          if grep -q "has the following vulnerable packages" vulnerability-report-dotnet.txt; then
            echo "✗ Vulnerable packages detected" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat vulnerability-report-dotnet.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY

            # Count severity levels
            CRITICAL=$(grep -i "critical" vulnerability-report-dotnet.txt | wc -l)
            HIGH=$(grep -i "high" vulnerability-report-dotnet.txt | grep -vi "critical" | wc -l)

            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY

            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT
          else
            echo "✓ No vulnerable .NET packages detected" >> $GITHUB_STEP_SUMMARY
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload vulnerability report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: vulnerability-report-dotnet
          path: vulnerability-report-dotnet.txt
          retention-days: 30

      - name: Fail on vulnerabilities
        if: steps.vuln-check.outputs.has_vulnerabilities == 'true'
        run: |
          CRITICAL=${{ steps.vuln-check.outputs.critical }}
          HIGH=${{ steps.vuln-check.outputs.high }}

          if [ "$CRITICAL" -gt "${{ env.MAX_CRITICAL_VULNERABILITIES }}" ] || [ "$HIGH" -gt "${{ env.MAX_HIGH_VULNERABILITIES }}" ]; then
            echo "::error::Found $CRITICAL critical and $HIGH high severity vulnerabilities. Maximum allowed: ${{ env.MAX_CRITICAL_VULNERABILITIES }} critical, ${{ env.MAX_HIGH_VULNERABILITIES }} high."
            exit 1
          fi

  dependency-audit-frontend:
    name: Dependency Audit (Frontend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Audit dependencies
        id: audit
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Dependency Vulnerability Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Run audit and capture output
          yarn npm audit --recursive --json > audit-report.json || true

          if [ -s audit-report.json ] && [ "$(jq '.metadata' audit-report.json)" != "null" ]; then
            CRITICAL=$(jq -r '.metadata.vulnerabilities.critical // 0' audit-report.json)
            HIGH=$(jq -r '.metadata.vulnerabilities.high // 0' audit-report.json)
            MODERATE=$(jq -r '.metadata.vulnerabilities.moderate // 0' audit-report.json)
            LOW=$(jq -r '.metadata.vulnerabilities.low // 0' audit-report.json)
            TOTAL=$((CRITICAL + HIGH + MODERATE + LOW))

            echo "| Severity | Count |" >> $GITHUB_STEP_SUMMARY
            echo "|----------|-------|" >> $GITHUB_STEP_SUMMARY
            echo "| Critical | $CRITICAL |" >> $GITHUB_STEP_SUMMARY
            echo "| High | $HIGH |" >> $GITHUB_STEP_SUMMARY
            echo "| Moderate | $MODERATE |" >> $GITHUB_STEP_SUMMARY
            echo "| Low | $LOW |" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            echo "critical=$CRITICAL" >> $GITHUB_OUTPUT
            echo "high=$HIGH" >> $GITHUB_OUTPUT
            echo "has_vulnerabilities=true" >> $GITHUB_OUTPUT

            if [ "$CRITICAL" -gt 0 ] || [ "$HIGH" -gt 0 ]; then
              echo "✗ Critical or high severity vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            else
              echo "✓ No critical or high severity vulnerabilities" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "✓ No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
            echo "has_vulnerabilities=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: audit-report-frontend
          path: src/BDP.Registry.Web/audit-report.json
          retention-days: 30

      - name: Fail on vulnerabilities
        if: steps.audit.outputs.has_vulnerabilities == 'true'
        run: |
          CRITICAL=${{ steps.audit.outputs.critical }}
          HIGH=${{ steps.audit.outputs.high }}

          if [ "$CRITICAL" -gt "${{ env.MAX_CRITICAL_VULNERABILITIES }}" ] || [ "$HIGH" -gt "${{ env.MAX_HIGH_VULNERABILITIES }}" ]; then
            echo "::error::Found $CRITICAL critical and $HIGH high severity vulnerabilities. Maximum allowed: ${{ env.MAX_CRITICAL_VULNERABILITIES }} critical, ${{ env.MAX_HIGH_VULNERABILITIES }} high."
            exit 1
          fi

  license-compliance-backend:
    name: License Compliance (Backend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_cli == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOTNET_VERSION }}

      - name: Cache NuGet packages
        uses: actions/cache@v4
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj') }}
          restore-keys: |
            ${{ runner.os }}-nuget-

      - name: Restore dependencies
        run: dotnet restore

      - name: Install dotnet-project-licenses tool
        run: |
          # Install the latest version compatible with .NET 9
          dotnet tool install --global dotnet-project-licenses --version 2.5.0 || \
          dotnet tool update --global dotnet-project-licenses --version 2.5.0

      - name: Generate license report
        run: |
          echo "## .NET Package License Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Generate JSON license report
          if dotnet-project-licenses --input . --output-directory ./licenses --export-license-texts --json --include-transitive 2>&1 | tee license-generation.log; then
            echo "✓ License report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Failed to generate license report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Error details:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat license-generation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Generate markdown table for summary
          if dotnet-project-licenses --input . --output-directory ./licenses --markdown 2>&1; then
            if [ -f "./licenses/licenses.md" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "### License Summary" >> $GITHUB_STEP_SUMMARY
              cat ./licenses/licenses.md >> $GITHUB_STEP_SUMMARY
            fi
          fi

      - name: Check for non-compliant licenses
        id: license-check
        run: |
          # Parse the JSON report and check for non-compliant licenses
          ALLOWED_LICENSES="${{ env.ALLOWED_LICENSES }}"

          if [ -f "./licenses/licenses.json" ]; then
            # Extract unique licenses
            FOUND_LICENSES=$(jq -r '.[].License' ./licenses/licenses.json | sort -u)

            echo "Found licenses:"
            echo "$FOUND_LICENSES"

            NON_COMPLIANT=""
            while IFS= read -r license; do
              if [ ! -z "$license" ] && [ "$license" != "null" ]; then
                # Check if license is in allowed list
                if ! echo "$ALLOWED_LICENSES" | grep -q -w "$license"; then
                  NON_COMPLIANT="$NON_COMPLIANT\n- $license"
                fi
              fi
            done <<< "$FOUND_LICENSES"

            if [ ! -z "$NON_COMPLIANT" ]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✗ Non-compliant licenses found:" >> $GITHUB_STEP_SUMMARY
              echo "$NON_COMPLIANT" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "Allowed licenses: $ALLOWED_LICENSES" >> $GITHUB_STEP_SUMMARY
              echo "::warning::Non-compliant licenses detected. Please review the license report."
              echo "has_issues=true" >> $GITHUB_OUTPUT
            else
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "✓ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
              echo "has_issues=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "::error::License report file not found"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report-backend
          path: licenses/
          retention-days: 90

      # Optionally fail the build on non-compliant licenses (uncomment if needed)
      # - name: Fail on non-compliant licenses
      #   if: steps.license-check.outputs.has_issues == 'true'
      #   run: |
      #     echo "::error::Non-compliant licenses found. Build failed."
      #     exit 1

  license-compliance-frontend:
    name: License Compliance (Frontend)
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'
          cache-dependency-path: src/BDP.Registry.Web/yarn.lock

      - name: Enable Corepack
        run: corepack enable

      - name: Install dependencies
        working-directory: src/BDP.Registry.Web
        run: yarn install --immutable

      - name: Install license-checker
        run: npm install -g license-checker

      - name: Generate license report
        working-directory: src/BDP.Registry.Web
        run: |
          echo "## Frontend Package License Report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Generate JSON report
          if license-checker --json --out licenses.json 2>&1 | tee license-generation.log; then
            echo "✓ License report generated successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "✗ Failed to generate license report" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Error details:" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat license-generation.log >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

          # Generate CSV report for easier viewing
          license-checker --csv --out licenses.csv

          # Generate markdown summary
          if license-checker --summary > licenses-summary.txt; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### License Summary" >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
            cat licenses-summary.txt >> $GITHUB_STEP_SUMMARY
            echo '```' >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for non-compliant licenses
        id: license-check
        working-directory: src/BDP.Registry.Web
        run: |
          ALLOWED_LICENSES="${{ env.ALLOWED_LICENSES }}"

          if [ ! -f "licenses.json" ]; then
            echo "::error::License report file not found"
            echo "has_issues=true" >> $GITHUB_OUTPUT
            exit 1
          fi

          # Check for non-compliant licenses
          license-checker --json --out licenses.json

          # Extract licenses and check compliance
          NON_COMPLIANT=$(jq -r 'to_entries | .[] | select(.value.licenses != null) | .value.licenses' licenses.json | \
            sort -u | \
            while read license; do
              if [ ! -z "$license" ] && ! echo "$ALLOWED_LICENSES" | grep -q -w "$license"; then
                echo "- $license"
              fi
            done)

          if [ ! -z "$NON_COMPLIANT" ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✗ Non-compliant licenses found:" >> $GITHUB_STEP_SUMMARY
            echo "$NON_COMPLIANT" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "Allowed licenses: $ALLOWED_LICENSES" >> $GITHUB_STEP_SUMMARY
            echo "::warning::Non-compliant licenses detected. Please review the license report."
            echo "has_issues=true" >> $GITHUB_OUTPUT
          else
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "✓ All licenses are compliant" >> $GITHUB_STEP_SUMMARY
            echo "has_issues=false" >> $GITHUB_OUTPUT
          fi

      - name: Upload license report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: license-report-frontend
          path: |
            src/BDP.Registry.Web/licenses.json
            src/BDP.Registry.Web/licenses.csv
            src/BDP.Registry.Web/licenses-summary.txt
          retention-days: 90

      # Optionally fail the build on non-compliant licenses (uncomment if needed)
      # - name: Fail on non-compliant licenses
      #   if: steps.license-check.outputs.has_issues == 'true'
      #   run: |
      #     echo "::error::Non-compliant licenses found. Build failed."
      #     exit 1

  docker-build:
    name: Docker Build Test
    needs: detect-changes
    if: needs.detect-changes.outputs.should_run_backend == 'true' || needs.detect-changes.outputs.should_run_frontend == 'true'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Registry API Docker image
        if: needs.detect-changes.outputs.should_run_backend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: src/BDP.Registry.API/Dockerfile
          push: false
          tags: bdp-registry-api:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build Registry Web Docker image
        if: needs.detect-changes.outputs.should_run_frontend == 'true'
        uses: docker/build-push-action@v5
        with:
          context: src/BDP.Registry.Web
          file: src/BDP.Registry.Web/Dockerfile
          push: false
          tags: bdp-registry-web:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Docker build summary
        run: |
          echo "## Docker Build Results" >> $GITHUB_STEP_SUMMARY
          echo "✓ All Docker images built successfully" >> $GITHUB_STEP_SUMMARY

  quality-gate:
    name: Quality Gate
    needs:
      - detect-changes
      - lint-backend
      - lint-frontend
      - build-and-test-backend
      - build-and-test-cli
      - build-and-test-frontend
      - coverage-gate
      - codeql-analysis
      - dependency-audit-backend
      - dependency-audit-frontend
      - license-compliance-backend
      - license-compliance-frontend
      - docker-build
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Check all jobs passed or skipped
        run: |
          echo "# Quality Gate Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          check_job() {
            local result=$1
            local name=$2
            local extra=$3

            if [[ "$result" == "success" ]]; then
              echo "✓ $name: Passed$extra" >> $GITHUB_STEP_SUMMARY
              return 0
            elif [[ "$result" == "skipped" ]]; then
              echo "- $name: Skipped (no relevant changes)" >> $GITHUB_STEP_SUMMARY
              return 0
            else
              echo "✗ $name: Failed" >> $GITHUB_STEP_SUMMARY
              return 1
            fi
          }

          FAILED=false

          check_job "${{ needs.lint-backend.result }}" "Linting (Backend)" "" || FAILED=true
          check_job "${{ needs.lint-frontend.result }}" "Linting (Frontend)" "" || FAILED=true
          check_job "${{ needs.build-and-test-backend.result }}" "Build & Test Backend" "" || FAILED=true
          check_job "${{ needs.build-and-test-cli.result }}" "Build & Test CLI" "" || FAILED=true
          check_job "${{ needs.build-and-test-frontend.result }}" "Build & Test Frontend" "" || FAILED=true
          check_job "${{ needs.coverage-gate.result }}" "Coverage Gate" " (${{ needs.build-and-test-backend.outputs.coverage-percentage }}%)" || FAILED=true
          check_job "${{ needs.codeql-analysis.result }}" "CodeQL Analysis" "" || FAILED=true
          check_job "${{ needs.dependency-audit-backend.result }}" "Dependency Audit (Backend)" "" || FAILED=true
          check_job "${{ needs.dependency-audit-frontend.result }}" "Dependency Audit (Frontend)" "" || FAILED=true
          check_job "${{ needs.license-compliance-backend.result }}" "License Compliance (Backend)" "" || FAILED=true
          check_job "${{ needs.license-compliance-frontend.result }}" "License Compliance (Frontend)" "" || FAILED=true
          check_job "${{ needs.docker-build.result }}" "Docker Build" "" || FAILED=true

          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "$FAILED" = true ]; then
            echo "✗ Quality gate failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          else
            echo "✓ Quality gate passed" >> $GITHUB_STEP_SUMMARY
          fi
